/*  Digit Entry
 * 
 *  From: https://github.com/PokemonAutomation/Arduino-Source
 * 
 */

#ifndef PokemonAutomation_SwitchDigitEntry_H
#define PokemonAutomation_SwitchDigitEntry_H

#ifdef __AVR__
#include "NativePrograms/SwitchFramework/Master.h"
#endif
#include "Common/MessageProtocol.h"
#include "Common/SwitchFramework/SwitchControllerDefs.h"

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//  Universal
#ifdef __cplusplus
//  With the cursor over the '1' digit, enter up to 12 digits. Each digit can be
//  either a raw integer (0-9), or ascii '0' - '9'. If the digit is invalid, it
//  will be get converted to 0.
void enter_digits_str   (uint8_t count, const char* digits);
void enter_digits       (uint8_t count, const uint8_t* digits);
#endif
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//  Client Side
#ifdef __cplusplus
namespace PokemonAutomation{
    class BotBase;
}
void enter_digits_str   (PokemonAutomation::BotBase& device, uint8_t count, const char* digits);
void enter_digits       (PokemonAutomation::BotBase& device, uint8_t count, const uint8_t* digits);
#endif
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//  Protocols
#if _WIN32
#pragma pack(push, 1)
#define PABB_PACK
#else
#define PABB_PACK   __attribute__((packed))
#endif
////////////////////////////////////////////////////////////////////////////////

#define PABB_MSG_COMMAND_ENTER_DIGITS                           0xa1
typedef struct{
    seqnum_t seqnum;
    uint8_t count;
    uint8_t digit_pairs[6];
} PABB_PACK pabb_enter_digits;

////////////////////////////////////////////////////////////////////////////////
#if _WIN32
#pragma pack(pop)
#endif
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
#endif

